---
import MainLayout from "../../layouts/MainLayout.astro";
import ProposalCard from "../../components/ProposalCard.astro";
import VotingInterface from "../../components/VotingInterface.astro";
import ProgressTracker from "../../components/ProgressTracker.astro";
import StepInstructions from "../../components/StepInstructions.astro";
import VotingExplanation from "../../components/VotingExplanation.astro";
import { Proposal } from "../../models/Proposal";
import { VotingStep } from "../../models/VotingState";
import { currentStep, updateStep } from "../../store/votingStore";
import { setProposalId } from "../../store/proposalStore";

const { id } = Astro.params;
const proposalId = parseInt(id);
const proposal = await Proposal.findByPk(proposalId);
setProposalId(proposalId);

if (!proposal) {
  return Astro.redirect("/404");
}

const initialStep = VotingStep.ConnectWallet;
---

<MainLayout title={`Vote on ${proposal.name}`}>
  <div class="container mx-auto px-4 py-8 flex flex-col md:flex-row gap-8">
    <div class="w-full md:w-1/2 space-y-6">
      <ProposalCard proposal={proposal} />
      <VotingInterface initialStep={initialStep} />
    </div>
    <div class="w-full md:w-1/2 space-y-6">
      <ProgressTracker currentStep={initialStep} />
      <StepInstructions currentStep={initialStep} />
      <VotingExplanation />
    </div>
  </div>
</MainLayout>

<script>
  import { currentStep, updateStep } from "../../store/votingStore";
  import { VotingStep } from "../../models/VotingState";

  async function checkWalletConnection() {
    if (typeof window.mina !== "undefined") {
      try {
        const accounts = await window.mina.getAccounts();
        if (accounts.length > 0) {
          updateStep(VotingStep.SwitchNetwork);
          checkNetwork();
        } else {
          updateStep(VotingStep.ConnectWallet);
        }
      } catch (error) {
        console.error("Error checking wallet connection:", error);
        updateStep(VotingStep.ConnectWallet);
      }
    } else {
      updateStep(VotingStep.ConnectWallet);
    }
    updateUI();
  }

  async function checkNetwork() {
    if (typeof window.mina !== "undefined") {
      try {
        const network = await window.mina.requestNetwork();
        if (network === "testnet") {
          updateStep(VotingStep.Vote);
        } else {
          updateStep(VotingStep.SwitchNetwork);
        }
      } catch (error) {
        console.error("Error checking network:", error);
        updateStep(VotingStep.SwitchNetwork);
      }
    }
    updateUI();
  }

  function updateUI() {
    document.dispatchEvent(
      new CustomEvent("votingStepChanged", {
        detail: { step: currentStep.get() },
      })
    );
  }

  function updateInstructions() {
    const instructionElement = document.querySelector(".current-instruction");
    if (instructionElement) {
      instructionElement.textContent = getInstructionText(currentStep.get());
    }
  }

  function getInstructionText(step: VotingStep): string {
    switch (step) {
      case VotingStep.ConnectWallet:
        return "Connect your Auro wallet to begin the voting process.";
      case VotingStep.SwitchNetwork:
        return "Please switch to the Mina testnet network in your Auro wallet, then click the 'Switch to Testnet' button.";
      case VotingStep.Vote:
        return "Cast your vote to approve or reject the proposal.";
    }
  }

  currentStep.subscribe(updateInstructions);

  // Check wallet connection on page load
  checkWalletConnection();

  // Listen for wallet connection changes
  window.addEventListener("mina:accountsChanged", checkWalletConnection);

  // Initial UI update
  updateInstructions();
</script>
