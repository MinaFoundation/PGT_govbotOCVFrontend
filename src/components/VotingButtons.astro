---
import { currentProposalId } from "../store/proposalStore";

// Get the proposal ID from the store
const proposalId = currentProposalId.get();
---

<div class="mt-4" data-proposal-id={proposalId}>
  <button
    id="voteYes"
    class="bg-green-500 text-white px-4 py-2 rounded hover:bg-opacity-80 transition-colors mr-2"
  >
    Vote For Approval
  </button>
  <button
    id="voteNo"
    class="bg-red-500 text-white px-4 py-2 rounded hover:bg-opacity-80 transition-colors"
  >
    Unvote/Vote For Rejection
  </button>
</div>

<p id="voteStatus" class="mt-2"></p>

<script>
  import { currentProposalId, setProposalId } from "../store/proposalStore";
  import {
    verifyCorrectNetwork,
    sendVoteTransaction,
  } from "../utils/walletUtils";

  const voteYesButton = document.getElementById("voteYes");
  const voteNoButton = document.getElementById("voteNo");
  const statusElement = document.getElementById("voteStatus");
  const container = document.querySelector("[data-proposal-id]");

  // Set the proposal ID in the store from the data attribute
  if (container) {
    const proposalId = parseInt(
      container.getAttribute("data-proposal-id") || ""
    );
    if (!isNaN(proposalId)) {
      setProposalId(proposalId);
    }
  }

  async function vote(voteType: "yes" | "no") {
    const proposalId = currentProposalId.get();
    if (proposalId === null) {
      if (statusElement) {
        statusElement.textContent =
          "Error: No proposal ID found. Please try again.";
        statusElement.className = "mt-2 text-red-500";
      }
      return;
    }

    try {
      const expectedNetwork = "mina:testnet";
      const isCorrectNetwork = await verifyCorrectNetwork(expectedNetwork);

      if (!isCorrectNetwork) {
        throw new Error(
          `Please switch to the correct network: ${expectedNetwork}`
        );
      }

      const result = await sendVoteTransaction(voteType, proposalId);
      if (statusElement) {
        statusElement.textContent = `Vote submitted, transaction hash: ${result.hash}`;
        statusElement.className = "mt-2 text-green-500";
      }
    } catch (error) {
      if (statusElement) {
        statusElement.textContent = `Error: ${error instanceof Error ? error.message : "Unknown error"}`;
        statusElement.className = "mt-2 text-red-500";
      }
    }
  }

  voteYesButton?.addEventListener("click", () => vote("yes"));
  voteNoButton?.addEventListener("click", () => vote("no"));
</script>
